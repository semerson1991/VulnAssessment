from automated_scans.nmap.nmap_scanner import NmapScanner
from automated_scans.openvas.openvas_results import OpenVasResults
from automated_scans.openvas.openvas_scanner import OpenvasScanner
from time import sleep

from automated_scans.results.scan_results import ScanResults
from automated_scans.security.cryptography import Encryptor


class VulnerabilityAssessment:

    def __init__(self):
        self.scan_results = []

    def run_nmap_scan(self, scan_results, key, nmapScanConfig):
        print('Running nmap scan')
        try:
            nmap = NmapScanner()
            nmap_hosts = ''
            #nmap_options = []
            nmap_options = ''

            if nmapScanConfig.scanType == 'Quick Network Scan':
                print('Running quick scan')
                nmap_hosts = '10.10.10.0/24'
                nmap_options += '-F '

            elif nmapScanConfig.scanType == 'Network Scan':
                print('Running Network Scan')
                nmap_hosts = '10.10.10.0/24'
                nmap_options += '-A '

            elif nmapScanConfig.scanType == 'Custom Network Scan':
                print('Running custom network scan')
                nmap_options += nmapScanConfig.getScanTechnique() + ' '

                if nmapScanConfig.hosts == '':
                    nmap_hosts = '10.10.10.0/24'
                else:
                    nmap_hosts = nmapScanConfig.hosts

                if nmapScanConfig.port_range != '':
                    nmap_options += '-p' + nmapScanConfig.getPortRange() + ' '

                if nmapScanConfig.getNetworkDetectionOps() != 'None':
                    nmap_options += nmapScanConfig.getNetworkDetectionOps() + ' '

                if nmapScanConfig.custom_args != '':
                    nmap_options += nmapScanConfig.custom_args

            print('Nmap Options: %s' % (nmap_options))
            scan_results.network_discovery_path = nmap.run_nmap_scan(nmap_hosts, nmap_options, scan_results.scan_id)

            encryptor = Encryptor(key)
            encryptor.encrypt_file(scan_results.network_discovery_path)

            scan_results.results_collected = True
            self.scan_results.append(scan_results)
            print("Background Thread Finished")
        except Exception as e:
            scan_results.error = "Server Error: Please contact help and support to report the error"
            self.scan_results.append(scan_results)
            print('Exception caught. Error: '+e)


    def run_openvas_scan(self, scan_results, hosts, key, scan_type):
        print('Running Vulnerability scan')
        try:
            if len(hosts) > 0:
                openvas_scanner = OpenvasScanner()

                scan_results.vuln_assessment_path = openvas_scanner.run_openvas_scan(hosts, scan_results.scan_id, scan_type)

            encryptor = Encryptor(key)
            encryptor.encrypt_file(scan_results.vuln_assessment_path)

            scan_results.results_collected = True
            self.scan_results.append(scan_results)
            print("Results ready to be collected")
        except Exception as e:
            scan_results.error = "Server Error: Please contact help and support to report the error"
            self.scan_results.append(scan_results)
            print('Exception caught. Error: ' + e)
