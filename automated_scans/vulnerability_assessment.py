from automated_scans.nmap.nmap_scanner import NmapScanner
from automated_scans.openvas.openvas_results import OpenVasResults
from automated_scans.openvas.openvas_scanner import OpenvasScanner
from time import sleep

from automated_scans.results.scan_results import ScanResults
from automated_scans.security.cryptography import Encryptor


class VulnerabilityAssessment:

    def __init__(self):
        self.scan_results = []

    def run_nmap_scan(self, scan_results, key):
        print('Running nmap scan')
        nmap = NmapScanner()
        #nmap_results = nmap.run_nmap_scan("10.10.10.0/24")
        scan_results.network_discovery_path = nmap.run_nmap_scan("10.10.10.2", scan_results.scan_id)

        encryptor = Encryptor(key)
        encryptor.encrypt_file(scan_results.network_discovery_path)

        scan_results.results_collected = True
        self.scan_results.append(scan_results)
        print("Background Thread Finished")

    def run_openvas_Scan(self, scan_results, hosts, key):
        print('Running Vulnerability scan')
        if len(hosts) > 0:
            openvas_scanner = OpenvasScanner()

            scan_results.vuln_assessment_path = openvas_scanner.run_openvas_scan(hosts, scan_results.scan_id)

        encryptor = Encryptor(key)
        encryptor.encrypt_file(scan_results.vuln_assessment_path)

        scan_results.results_collected = True
        self.scan_results.append(scan_results)
        print("Results ready to be collected")
