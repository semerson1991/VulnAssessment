from automated_scans.nmap.nmap_scanner import NmapScanner
from automated_scans.openvas.openvas_results import OpenVasResults
from automated_scans.openvas.openvas_scanner import OpenvasScanner
from time import sleep

from automated_scans.results.scan_results import ScanResults


class VulnerabilityAssessment:

    def __init__(self):
        self.scan_results = []

    def run_all(self):
        scan_results = ScanResults()

        nmap_result = self.run_nmap_scan()

        hosts = []
        for host in nmap_result.hosts:
            hosts.append(host)
        if len(hosts) > 0:
            openvas_scanner = OpenvasScanner()

            openvas_scanner.run_openvas_scan(hosts)
            while openvas_scanner.check_progress('afbfd91c-37e2-4aca-bfd4-7ece0ef5365a') is not 'Done':
                sleep(5)

            openvas_result = OpenVasResults()
            openvas_report = openvas_result.get_report()

            scan_results.nmap_result = nmap_result
            scan_results.openvas_result.append(openvas_report)
            scan_results.results_collected = True
            self.scan_results.append(scan_results)

    def run_nmap_scan(self):
        nmap = NmapScanner()
        nmap_results = nmap.run_nmap_scan("10.10.10.0/24")
        return nmap_results


    def run_openvas_Scan(self, hosts):
        openvas = OpenvasScanner
        openvas.run_openvas_scan(hosts)

    def is_scan_finished(self, scan_id):
        for result in self.scan_results:
            if scan_id == result.get_scanId():
                return result.results_collected
